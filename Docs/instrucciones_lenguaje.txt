∗ (defvar name n) where name is a variable’s name and n is a number or a
constant used initializing the variable.
∗ (= name n) where name is a variable’s name and n is a number or a constant
The result of this instruction is to assign the value of the number n to the
variable.
∗ (move n): where n is a number or a variable or a constant. The robot
should move n steps forward.
∗ (skip n): where n is a number or a variable or a constant. The robot
should jump n steps forward.
∗ (turn D): where D can be :left, :right, or :around (defined as constants).
The robot should turn 90 degrees in the direction of the parameter in the
first to cases, and 180 in the last case.
∗ (face O): where O can be :north, :south, :east, or :west (all constants).
The robot should turn so that it ends up facing direction O.
∗ (put X n): where X corresponds to either :balloons or :chips, and n is a
number or a variable. The Robot should put n X’s.
∗ (pick X n): where X is either :balloons or :chips, and n is a number or
a variable. The robot should pick n X’s.
∗ (move-dir n D): where n is a number or a variable. D is one of :front,
:right, :left, :back. The robot should move n positions to the front,
to the left, the right or back and end up facing the same direction as it
started.
∗ (run-dirs Ds): where Ds is a non-empty list of directions: :front, :right,
:left, :back. The robot should move in the directions indicated by the
list and end up facing the same direction as it started.
∗ (move-face n O): here n is a number or a variable. O is :north, :south,
:west, or :east. The robot should face O and then move n steps.
∗ (null): a instruction that does not do anything
∗ These are the constants that can be used:
    · Dim : the dimensions of the board
    · myXpos: the x postition of the robot
    · myYpos: the y position of the robot
    · myChips: number of chips held by the robot
    · myBalloons: number of balloons held by the robot
    · balloonsHere: number of balloons in the robot’s cell
    · ChipsHere: number of chips that can be picked
    · Spaces: number of chips that can be dropped
∗ A control structure can be:
   Conditional: (if condition B1 B2): Executes B1 if condition is true and
    B2 if condition is false. B1 and B2 can be a single command or a Block
   Repeat: (loop condition B): Executes B while condition is true. B can
    be a single command or a block.
   RepeatTimes: (repeat n B) where n is a variable or a number.
    B is executed n times. B is a cingle command or a block.
   FunctionDefinition: (defun name (Params)Cs) where name is the func-
    tion name, (Params) is a list of parameter names for the function (sep-
    arated by spaces) and Cs is a sequence of commands for the function.
∗ A function call is the function’s name followed by parameter values within
parenthesis, as in (funName a1 a2 a3).
∗ A condition can be:
    · (facing? O) where O is one of: :north, :south, :east, or :west
    · (blocked?) This is true if the Robot cannot move forward.
    · (can-put? X n) where X can be chips or balloons, and n is a value.
    · (can-pick? X n) where X can be chips or balloons, and n is a value.
    · (can-move? O) where O is one of: :north, :south, :west, or :east
    · (isZero? V) where V is a value.
    · (not cond) where cond is a condition.